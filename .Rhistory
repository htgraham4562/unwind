return(datret1)
}
} else {
return(datuse)
}
}
minesweeper()
library(unwind)
minesweeper()
usethis::use_vignette('my-vinette')
library(usethis)
unwind::use_vignette('my-vinette')
install.packages('usethis')
library(usethis)
usethis::use_vignette('my-vinette')
usethis::use_vignette('unwind-vignette')
gamelog_ttt
gamelog_examp <- data.frame(StartTime = 'Not Applicable',
GameType = 'Unknown',
RandSeed = 123456,
GameResult = 'Loss',
GameTime = 5,
NumMoves_X = 0,
NumMoves_O = 0)
gamelog_examp
tictactoe(gamelog_examp)
gamelog_ttt
sys.time
Sys.Time
Sys.time()
data.frame(StartTime = Sys.time(),
GameType = 'Unknown',
RandSeed = 123456,
GameResult = 'Loss',
GameTime = round(difftime(Sys.time(), Sys.time()+10, units = 'secs'), 0),
NumMoves_X = 0,
NumMoves_O = 0)
data.frame(StartTime = Sys.time(),
GameType = 'Unknown',
RandSeed = 123456,
GameResult = 'Loss',
GameTime = round(difftime(Sys.time()+10, Sys.time(), units = 'secs'), 0),
NumMoves_X = 0,
NumMoves_O = 0)
gamelog_mine
gamelog_examp <- data.frame(StartTime = Sys.time(),
DiffLev = 'Unknown',
NumRows = 7,
NumCols = 14,
NumMines = 10,
RandSeed = 123456,
GameResult = 'Loss',
GameTime = round(difftime(Sys.time()+10, Sys.time(), units = 'secs'), 0))
minesweeper(gamelog_examp)
gamelog_mine
library(devtools)
install.packages('devtools')
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
library(shiny)
library(miniUI)
library(shinyWidgets)
library(thematic)
library(dplyr)
library(ggplot2)
library(lubridate)
library(stringr)
# function to safely sample one integer
resample <- function(x, ...) x[sample.int(length(x), ...)]
# function for plotting tic-tac-toe grid
plt_ttt <- function(dat_use, mode_game, player_use){
ggplot(data = dat_use, aes(x=colx, y=rowy)) +
geom_point(size = 0) +
geom_text(label = dat_use$vals, nudge_x = -0.5, nudge_y = -0.5,
color = 'black', size = 30,
alpha = ifelse(dat_use$vals %in% c('X', 'O'), 1, 0.06)) +
geom_hline(yintercept = c(1,2), size = 4, color = '#63666A') +
geom_vline(xintercept = c(1,2), size = 4, color = '#63666A') +
scale_x_continuous(limits = c(0,3)) +
scale_y_continuous(limits = c(0,3)) +
coord_fixed(expand = F) +
ggtitle(ifelse(grepl('One', mode_game),
paste0("TIC-TAC-TOE\n", mode_game),
paste0("TIC-TAC-TOE\n", mode_game, "\nPlayer ", player_use, "'s Turn"))) +
theme(axis.ticks = element_blank(),
axis.title = element_blank(),
axis.text = element_blank(),
panel.grid = element_blank(),
plot.title = element_text(hjust = 0.5, size = 30))
}
# function for updating ttt grid dataset
ttt_grid_update <- function(datuse, grid_r, grid_c, playturn){
tmp <- mutate(datuse,
vals = ifelse(rowy == grid_r & colx == grid_c,
ifelse(playturn == 0, 'X', 'O'),
vals))
return(tmp)
}
# function for updating win possibilities dataset
ttt_win_update <- function(datuse, grid_r, grid_c, playturn){
val_play <- ifelse(grid_r == 1 & grid_c == 1, 7,
ifelse(grid_r == 1 & grid_c == 2, 8,
ifelse(grid_r == 1 & grid_c == 3, 9,
ifelse(grid_r == 2 & grid_c == 1, 4,
ifelse(grid_r == 2 & grid_c == 2, 5,
ifelse(grid_r == 2 & grid_c == 3, 6,
ifelse(grid_r == 3 & grid_c == 1, 1,
ifelse(grid_r == 3 & grid_c == 2, 2, 3))))))))
tmp <- mutate(datuse,
seqval = ifelse(cell1 == val_play, paste0(ifelse(playturn == 0, 'X', 'O'), substr(seqval, 2,3)),
ifelse(cell2 == val_play, paste0(substr(seqval, 1,1), ifelse(playturn == 0, 'X', 'O'), substr(seqval, 3,3)),
ifelse(cell3 == val_play, paste0(substr(seqval, 1,2), ifelse(playturn == 0, 'X', 'O')), seqval))),
win_0 = str_count(seqval, 'X'),
win_1 = str_count(seqval, 'O')) #%>%
#filter(!(win_0 > 0 & win_1 > 0))
return(tmp)
}
# function to check for win / draw
ttt_check <- function(datuse){
retval <- ifelse(nrow(filter(datuse, win_0 > 0, win_1 > 0)) == 8, 'draw',
ifelse(nrow(filter(datuse, win_0 == 3 | win_1 == 3)) > 0,
'win', 'ongoing'))
return(retval)
}
# function to find next computer move
ttt_comp_move <- function(dat_grid, dat_wins, mode, comp_val){
if (comp_val) {
col_comp <- 'win_0'
col_play <- 'win_1'
} else {
col_comp <- 'win_1'
col_play <- 'win_0'
}
if(str_count(mode, 'Easy') > 0) {
tmp <- dat_wins[which(dat_wins[[col_comp]] == min(dat_wins[[col_comp]])),]
tmp2 <- tmp[which(tmp[[col_play]] == min(tmp[[col_play]])),]
tmp3 <- table(c(tmp2$cell1[which(substr(tmp2$seqval, 1,1) == '-')],
tmp2$cell2[which(substr(tmp2$seqval, 2,2) == '-')],
tmp2$cell3[which(substr(tmp2$seqval, 3,3) == '-')]))
samp_vec <- as.numeric(names(tmp3)[which(tmp3 == min(tmp3))])
return(resample(samp_vec, 1))
} else if(str_count(mode, 'Normal') > 0){
return(resample(which(dat_grid$vals == ''), 1))
} else {
# win if available
tmp1 <- dat_wins[which(dat_wins[[col_comp]] == 2 & dat_wins[[col_play]] == 0),]
# block if available
tmp2 <- dat_wins[which(dat_wins[[col_play]] == 2& dat_wins[[col_comp]] == 0),]
# else pick a reasonable move
tmp0 <- dat_wins[which(dat_wins$win_0 + dat_wins$win_1 != 3),]
tmp <- tmp0[which(tmp0[[col_comp]] == max(tmp0[[col_comp]])),]
tmp3 <- tmp[which(tmp[[col_play]] == max(tmp[[col_play]])),]
if (nrow(tmp1) > 0){
tmp4 <- table(c(tmp1$cell1[which(substr(tmp1$seqval, 1,1) == '-')],
tmp1$cell2[which(substr(tmp1$seqval, 2,2) == '-')],
tmp1$cell3[which(substr(tmp1$seqval, 3,3) == '-')]))
samp_vec <- as.numeric(names(tmp4)[which(tmp4 == max(tmp4))])
return(resample(samp_vec, 1))
} else if (nrow(tmp2) > 0){
tmp4 <- table(c(tmp2$cell1[which(substr(tmp2$seqval, 1,1) == '-')],
tmp2$cell2[which(substr(tmp2$seqval, 2,2) == '-')],
tmp2$cell3[which(substr(tmp2$seqval, 3,3) == '-')]))
samp_vec <- as.numeric(names(tmp4)[which(tmp4 == max(tmp4))])
return(resample(samp_vec, 1))
} else {
tmp4 <- table(c(tmp3$cell1[which(substr(tmp3$seqval, 1,1) == '-')],
tmp3$cell2[which(substr(tmp3$seqval, 2,2) == '-')],
tmp3$cell3[which(substr(tmp3$seqval, 3,3) == '-')]))
samp_vec <- as.numeric(names(tmp4)[which(tmp4 == max(tmp4))])
return(resample(samp_vec, 1))
}
}
}
# Function for Shiny Gadget
tictactoe <- function(gamelog = NULL) {
ui <- miniPage(
miniContentPanel(
plotOutput("plot", click="playhere"),
textOutput('timer_val'),
textOutput('seed_val')
),
# user inputs
tags$head(tags$style(type = 'text/css',".shiny-input-panel{padding: 0px 0px !important;}")),
inputPanel(
switchInput('numplayer', value = TRUE, onLabel = 'One Player', offLabel = 'Two Players',
onStatus = '#63666A', offStatus = '#63666A', label = 'Game Type'),
conditionalPanel(
condition = "input.numplayer",
tags$style(type = 'text/css', 'label{ display: table-cell; text-align: left;vertical-align: top; } .form-group { display: table-row;}'),
switchInput('xos', value = TRUE, onLabel = "X (1st)", offLabel = "O (2nd)", label = 'Play Symbol',
onStatus = '#63666A', offStatus = '#63666A')
),
conditionalPanel(
condition = "input.numplayer",
tags$style(type = 'text/css', 'label{ display: table-cell; text-align: left;vertical-align: top; } .form-group { display: table-row;}'),
radioButtons("difflev", label = "",
choices = c("Easy", 'Normal', 'Hard'))
),
conditionalPanel(
condition = "input.numplayer",
tags$style(type = 'text/css', 'label{ display: table-cell; text-align: left;vertical-align: top; } .form-group { display: table-row;}'),
textInput('randseed', label = "Seed:", width = 100)
),
panel(
actionButton("newgame", label = "START GAME", style = "background-color: #b1a29b"),
style = "background-color: #a9b6bc; color: #63666A"
),
style = "background-color: #a9b6bc; color: #63666A"),
setBackgroundColor('#a9b6bc')
)
server <- function(input, output, session) {
# turn on thematic
thematic_on()
# initialize game log
if (is.null(gamelog)){
game_log_out <- reactiveVal(data.frame(StartTime = NA,
GameType = NA,
RandSeed = NA,
GameResult = NA,
GameTime = NA,
NumMoves_X = NA,
NumMoves_O = NA)%>%
dplyr::filter(!is.na(StartTime)))
} else {
# check if supplied log is in the right format (warning message if not)
if(sum(c('StartTime', 'GameType',
'RandSeed', 'GameResult', 'GameTime',
'NumMoves_X', 'NumMoves_O') %in% colnames(gamelog)) != 7){
warning("Warning: User-supplied game log does not contain all necessary columns.
User-supplied game log will be ignored and a new game log will be started.")
game_log_out <- reactiveVal(data.frame(StartTime = NA,
GameType = NA,
RandSeed = NA,
GameResult = NA,
GameTime = NA,
NumMoves_X = NA,
NumMoves_O = NA) %>%
dplyr::filter(!is.na(StartTime)))
} else if (ncol(gamelog) > 7){
warning("Warning: User-supplied game log contains more columns than expected.
Additional columns will be removed from game log.")
game_log_out <- reactiveVal(gamelog[c('StartTime', 'GameType',
'RandSeed', 'GameResult', 'GameTime',
'NumMoves_X', 'NumMoves_O')])
} else {
game_log_out <- reactiveVal(gamelog)
}
}
# initialize empty game board
ttt_init <- data.frame(colx = rep(c(1:3),3),
rowy = c(rep(3,3), rep(2,3), rep(1,3)),
vals = "")
# initialize possible win combinations
ttt_wins <- data.frame(cell1 = c(1,4,7,1,2,3,1,3),
cell2 = c(2,5,8,4,5,6,5,5),
cell3 = c(3,6,9,7,8,9,9,7),
seqval = "---",
win_0 = 0, win_1 = 0)
# initialize
mode_game <- reactiveVal()
seed_val_use <- reactiveVal()
timer <- reactiveVal()
time_init <- reactiveVal()
ttt_new <- reactiveVal()
ttt_wins_new <- reactiveVal()
player_turn <- reactiveVal()
compval_init <- reactiveVal()
compval_flg <- reactiveVal()
observeEvent(input$newgame, {
# determine if one or two player game for setup
if(isolate(input$numplayer)){ # if one player game selected
# determine which seed to use (user specified or random)
if(isolate(input$randseed) != ""){
seed_val_use(as.numeric(isolate(input$randseed)))} else {
seed_val_use(round(as.numeric(Sys.time()), 0))
}
mode_game(paste0("One Player: ", isolate(input$difflev)))
# set seed
set.seed(seed_val_use())
# get new grid
if (isolate(input$xos)){ # if player wants to go first
ttt_new(ttt_init)
ttt_wins_new(ttt_wins)
compval_flg(FALSE)
} else { # if player wants computer to go first
compval_init(ifelse(isolate(input$difflev) == 'Easy', sample(c(2,4,6,8), 1),
ifelse(isolate(input$difflev) == 'Normal', sample(c(1:9), 1),
5)))
ttt_new(mutate(ttt_init, vals = ifelse(row_number() == compval_init(), 'X', '')))
# update wins grid
compval_flg(TRUE)
mutate(ttt_wins,
seqval = ifelse(cell1 == compval_init(), paste0(ifelse(compval_flg(), 'X', 'O'), substr(seqval, 2,3)),
ifelse(cell2 == compval_init(), paste0(substr(seqval, 1,1), ifelse(compval_flg(), 'X', 'O'), substr(seqval, 3,3)),
ifelse(cell3 == compval_init(), paste0(substr(seqval, 1,2), ifelse(compval_flg(), 'X', 'O')), seqval))),
win_0 = str_count(seqval, 'X'),
win_1 = str_count(seqval, 'O')) %>%
#dplyr::filter(!(win_0 > 0 & win_1 > 0)) %>%
ttt_wins_new()
}
} else { # if two player game selected
seed_val_use("Not Applicable")
mode_game(paste0("Two Player"))
# get new grid
ttt_new(ttt_init)
ttt_wins_new(ttt_wins)
}
# start timer
timer(0)
time_init(Sys.time())
# update timer every second
observe({
invalidateLater(1000, session)
isolate({timer(round(difftime(Sys.time(), time_init(), units = 'secs'), 0))})
})
# X's go first
player_turn(0)
}) # when start game button is pushed, get a new board
# update grid based on user input
observeEvent(input$playhere, {
if(grepl('One', mode_game())){ # if one player game, update the grid for both player and computer
# change display grid
if(nrow(dplyr::filter(ttt_new(), rowy == ceiling(as.numeric(isolate(input$playhere$y))) &
colx == ceiling(as.numeric(isolate(input$playhere$x))) & !(vals %in% c('X', 'O')))) > 0){
# update grid
ttt_grid_update(ttt_new(), ceiling(as.numeric(isolate(input$playhere$y))),
ceiling(as.numeric(isolate(input$playhere$x))), abs(compval_flg())) %>%
ttt_new()
# update win possibilities
ttt_win_update(ttt_wins_new(), ceiling(as.numeric(isolate(input$playhere$y))),
ceiling(as.numeric(isolate(input$playhere$x))),
abs(compval_flg())) %>%
ttt_wins_new()
# check for win / draw / ongoing and also play computer's turn
if(ttt_check(ttt_wins_new()) == 'draw'){
# display message
showModal(modalDialog("The game has completed without a winner.",
easyClose = T, size = 'l'))
# output log
game_log_out(rbind(isolate(game_log_out()),
data.frame(StartTime = isolate(time_init()),
GameType = isolate(mode_game()),
RandSeed = isolate(seed_val_use()),
GameResult = 'Draw',
GameTime = isolate(timer()),
NumMoves_X = nrow(dplyr::filter(isolate(ttt_new()), vals == 'X')),
NumMoves_O = nrow(dplyr::filter(isolate(ttt_new()), vals == 'O')))))
assign('gamelog_ttt', game_log_out(), envir=.GlobalEnv)
time_init(NA)
# wipe grid dataset
ttt_new(NULL)
} else if (ttt_check(ttt_wins_new()) == 'win') {
# display message
showModal(modalDialog(paste0("Tic-Tac-Toe, three-in-a-row! You've won the game!"),
easyClose = T, size = 'l'))
# output log
game_log_out(rbind(isolate(game_log_out()),
data.frame(StartTime = isolate(time_init()),
GameType = isolate(mode_game()),
RandSeed = isolate(seed_val_use()),
GameResult = "Win",
GameTime = isolate(timer()),
NumMoves_X = nrow(dplyr::filter(isolate(ttt_new()), vals == 'X')),
NumMoves_O = nrow(dplyr::filter(isolate(ttt_new()), vals == 'O')))))
assign('gamelog_ttt', game_log_out(), envir=.GlobalEnv)
time_init(NA)
# wipe grid dataset
ttt_new(NULL)
} else if(ttt_check(ttt_wins_new()) == 'ongoing'){
# play for computer and re-check for a computer win
valplay <- ttt_comp_move(ttt_new(), ttt_wins_new(), mode_game(), compval_flg())
# update grid
mutate(ttt_new(), vals = ifelse(row_number() == valplay,
ifelse(compval_flg(), 'X', 'O'), vals)) %>%
ttt_new()
# update win possibilities
mutate(ttt_wins_new(),
seqval = ifelse(cell1 == valplay, paste0(ifelse(compval_flg(), 'X', 'O'), substr(seqval, 2,3)),
ifelse(cell2 == valplay, paste0(substr(seqval, 1,1), ifelse(compval_flg(), 'X', 'O'), substr(seqval, 3,3)),
ifelse(cell3 == valplay, paste0(substr(seqval, 1,2), ifelse(compval_flg(), 'X', 'O')), seqval))),
win_0 = str_count(seqval, 'X'),
win_1 = str_count(seqval, 'O')) %>%
#dplyr::filter(!(win_0 > 0 & win_1 > 0)) %>%
ttt_wins_new()
# check for computer win
if(ttt_check(ttt_wins_new()) == 'draw'){
# display message
showModal(modalDialog("The game has completed without a winner.",
easyClose = T, size = 'l'))
# output log
game_log_out(rbind(isolate(game_log_out()),
data.frame(StartTime = isolate(time_init()),
GameType = isolate(mode_game()),
RandSeed = isolate(seed_val_use()),
GameResult = 'Draw',
GameTime = isolate(timer()),
NumMoves_X = nrow(dplyr::filter(isolate(ttt_new()), vals == 'X')),
NumMoves_O = nrow(dplyr::filter(isolate(ttt_new()), vals == 'O')))))
assign('gamelog_ttt', game_log_out(), envir=.GlobalEnv)
time_init(NA)
# wipe grid dataset
ttt_new(NULL)
} else if (ttt_check(ttt_wins_new()) == 'win') {
# display message
showModal(modalDialog(paste0("Oh No! You've lost the game!"),
easyClose = T, size = 'l'))
# output log
game_log_out(rbind(isolate(game_log_out()),
data.frame(StartTime = isolate(time_init()),
GameType = isolate(mode_game()),
RandSeed = isolate(seed_val_use()),
GameResult = "Loss",
GameTime = isolate(timer()),
NumMoves_X = nrow(dplyr::filter(isolate(ttt_new()), vals == 'X')),
NumMoves_O = nrow(dplyr::filter(isolate(ttt_new()), vals == 'O')))))
assign('gamelog_ttt', game_log_out(), envir=.GlobalEnv)
time_init(NA)
# wipe grid dataset
ttt_new(NULL)
}
}
}
}
if(grepl('Two', mode_game())) { # if two player, just make move where clicked
# change display grid
if(nrow(dplyr::filter(ttt_new(), rowy == ceiling(as.numeric(isolate(input$playhere$y))) &
colx == ceiling(as.numeric(isolate(input$playhere$x))) & !(vals %in% c('X', 'O')))) > 0){
# update grid
ttt_grid_update(ttt_new(), ceiling(as.numeric(isolate(input$playhere$y))),
ceiling(as.numeric(isolate(input$playhere$x))), player_turn()) %>%
ttt_new()
# update win possiblities
ttt_win_update(ttt_wins_new(), ceiling(as.numeric(isolate(input$playhere$y))),
ceiling(as.numeric(isolate(input$playhere$x))),
player_turn()) %>%
ttt_wins_new()
# check for a win / draw / ongoing
if(ttt_check(ttt_wins_new()) == 'draw'){
# display message
showModal(modalDialog("The game has completed without a winner.",
easyClose = T, size = 'l'))
# output log
game_log_out(rbind(isolate(game_log_out()),
data.frame(StartTime = isolate(time_init()),
GameType = 'Two Player',
RandSeed = 'Not Applicable',
GameResult = 'Draw',
GameTime = isolate(timer()),
NumMoves_X = nrow(dplyr::filter(isolate(ttt_new()), vals == 'X')),
NumMoves_O = nrow(dplyr::filter(isolate(ttt_new()), vals == 'O')))))
assign('gamelog_ttt', game_log_out(), envir=.GlobalEnv)
time_init(NA)
# wipe grid dataset
ttt_new(NULL)
} else if(ttt_check(ttt_wins_new()) == 'win'){
# display message
showModal(modalDialog(paste0("Tic-Tac-Toe, three-in-a-row! Player ", player_turn() +1, ' has won the game!'),
easyClose = T, size = 'l'))
# output log
game_log_out(rbind(isolate(game_log_out()),
data.frame(StartTime = isolate(time_init()),
GameType = 'Two Player',
RandSeed = 'Not Applicable',
GameResult = paste0('Player ', isolate(player_turn()) +1, ' won'),
GameTime = isolate(timer()),
NumMoves_X = nrow(dplyr::filter(isolate(ttt_new()), vals == 'X')),
NumMoves_O = nrow(dplyr::filter(isolate(ttt_new()), vals == 'O')))))
assign('gamelog_ttt', game_log_out(), envir=.GlobalEnv)
time_init(NA)
# wipe grid dataset
ttt_new(NULL)
} else {
# switch player turn
player_turn(abs(player_turn() -1))
}
}
}
})
# update game board
output$plot <- renderPlot({
plt_ttt(ttt_new(), mode_game(), player_turn()+1)
})
# display timer
output$timer_val <- renderText({
paste0('Time: ', seconds_to_period(timer()))
})
# display seed
output$seed_val <- renderText({
paste0('Seed: ', seed_val_use())
})
# Let user know that game log is saved in global environment
onStop(function() {
cat("Your game log is saved as a dataframe in the global environment named 'gamelog_ttt'.\nTo save your next game(s) to this log, supply the log object as the argument to the tictactoe function on startup.\nCome back to unwind soon!")
})
}
suppressWarnings(runGadget(ui, server, viewer = dialogViewer('Unwind with Tic-Tac-Toe', width = 900, height = 650)))
}
tictactoe()
library(unwind)
tictactoe()
gamelog_ttt
